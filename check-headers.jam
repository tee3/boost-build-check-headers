import print ;

import generators ;
import "class" : new ;
import virtual-target ;
import type ;

type.register XXX ;

class check-headers : generator
{
  rule __init__ ( * : * )
  {
    echo "__init__ of check-headers" $(1) $(2) $(3) $(4) $(5) ;

    generator.__init__ $(1) : $(2) : $(3) : $(4) : $(5) : $(6) : $(7) : $(8) : $(9) ;
  }

  rule run ( project name ? : property-set : sources * )
  {
    echo "run of check-headers" ;

    echo $(project) ;
    echo $(name) ;
    echo $(property-set) ;
    echo $(sources) ;

    local result ;

    result = [ generators.construct $(project) compile_test_xxx.cpp : CPP : $(property-set) : junk.hpp ] ;

    echo $(result) ;

    return $(result) ;
  }

  rule generated-targets ( sources + : property-set : project name ? )
  {
    echo "generated-targets of check-headers" ;

    echo $(sources) ;
    echo $(property-set) ;
    echo $(project) ;
    echo $(name) ;
  }
}

generators.register [ new check-headers check-headers.check-headers : : XXX ] ;

# rule check-headers ( target : sources * : properties * )
# {
#   echo $(target) ;
#   echo $(sources) ;
#   echo $(properties) ;
# 
#   make yyy.cpp : $(sources) : @check-headers.generate-translation-unit-for-single-header : $(requirements) : $(usage-requirements) ;
#   link yyy.cpp ;
# }
#  
# rule generate-translation-unit-for-single-header ( target : sources * : property-set * )
# {
#   echo $(target) ;
#   echo $(sources) ;
#   echo $(property-set) ;
# 
#   print.output $(target) ;
# 
#   print.text "#include \"$(header-name)\"" : true ;
#   print.text "int main () { return 0; }" : true ;
#   print.text "" ;
# } 
